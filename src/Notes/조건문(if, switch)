- 조건문
    조건을 만족할때만 {}를 (0번 or 1번) 수행

- if 문 (조건문)
    조건식이 참(true)일 때, 괄호 {} 안의 문장들을 수행한다.

    if (조건식( ture or false) ) {
        // 조건식이 참(true)일 때 수행될 문장들을 적는다.
    }

    if (score > 60) {
        System.out.println("합격입니다.");
    }

            조건식                                 조건식이 참일 조건
    90 <= x && x <= 100                     정수 x 가 90이상 100이하 일 때
    x < 0 || x> 100                         정수 x 가 0보다 작거나 100보다 클 때
    x % 3 == && x % 2 != 0                  정수 x 가 3의 배수지만, 2의 배수는 아닐 때
    ch == 'y' || ch == 'Y'                  문자 ch 가 'y' 또는 'Y'일 때
    ch == ' ' || ch == '\t' || ch == '\n'   문자 ch 가 공백이거나 탭 또는 개행 문자일 때
    'A' <= ch && ch <= 'Z'                  문자 ch 가 대문자 일 때
    'a' <= ch && ch <= 'z'                  문자 ch 가 소문자 일 때
    '0' <= ch && ch <= '9'                  문자 ch 가 숫자 일 때
    str.equals("yes")                       문자열 str 의 내용이 "yes"일 때(대소문자 구분)
    str.equalsIgnoreCase("yes")             문자열 str 의 내용이 "yes"일 때(대소문자 구분 안함)

- 블럭 {}
    여러 문장을 하나로 묶어주는 것
                if (score > 60)
   블럭의 시작-> {
                    System.out.println("합격입니다.");
                    System.out.println("축하합니다.");
     블럭의 끝-> }

- if - else 문
    둘 중의 하나 - 조건식이 참일 때와 거짓일 때로 나눠서 처리

        if (조건식) {
            // 조건식이 참일 때 수행될 문장들을 적는다.
        } else {
            // 조건식이 거짓일 때 수행될 문장들을 적는다.
        }

- if - else if 문
    여러 개 중의 하나 - 여러 개의 조건식을 포함한 조건식

        if (조건식1) {
            // 조건식1의 연산결과가 참일 때 수행될 문장들을 적는다
        } else if (조건식2) {
            // 조건식2의 연산결과가 참일 때 수행될 문장들을 적는다
        } else if (조건식3) { // 여러개의 else if 문을 사용할 수 있다다
           // 조건식3의 연산결과가 참일 때 수행될 문장들을 적는다
        } else { // 마지막은 보통 else 불럭으로 끝나며, else 블럭은 생략 가능하다
            // 위의 어느 조건식도 만족하지 않을 때 수행될 문장들을 적는다.
        }

- 중첩 if 문 = if 문 안의 if

    if (조건식1) {
        // 조건식 1의 연산결과가 true 일 때 수행될 문장들을 적는다.
        if (조건식2) {
            // 조건식 1, 2가 무두 true 일 때 수행될 문장들을 적는다.
        } else {
            // 조건식 1이 true 이고, 조건식 2가 false 일 때 수행될 문장들을 적는다.
        }
    } else {
        // 조건식 1이 false 일 때 수행될 문장들을 적는다.
    }

- switch 문 (조건문)
    처리해야 하는 경우의 수가 많을 때 유용한 조건문
    1. 조건식을 계산한다
    2. 조건식의 결과와 일치하는 case 문으로 이동한다
    3. 이후의 문장들을 수행한다
    4. break 문이나 switch 문의 끝을 만나면 switch 문 전체를 빠져나간다.

    switch (조건식) {
        case 값1 :
            // 조건식의 결과가 값 1과 같을 경우 수행될 문장들들
            break;
        case 값2 :
            // 조건식의 결과가 값 1과 같을 경우 수행될 문장들들
            break;
        case 값3 :
            // 조건식의 결과가 값 1과 같을 경우 수행될 문장들들
            break;
        default :
            // 조건식의 결과와 일지하는 case 문이 없을 때 수행될 문장들
    }

- switch 문의 제약 조건
    1. switch 문의 조건식 결과는 정수 또는 문자열(java(JDK) 1.7 이상)이어야 한다.
    2. case 문의 값은 정수 상수(문자 포함), 문자열만 가능하며, 중복되지 않아야 한다.

        int num , result;
        final int ONE = 1;

        switch (result) {
            case '1': // ok. 문자 리터럴(정수 49와 동일)
            case ONE: // ok. 정수, 상수
            case "YES": // ok. 문자 리터럴 JDK 1.7 부터 허용
            case num: // 에러. 변수는 불가
            case 1.0: // 에러. 실수는 불가
        }

- 임의의 정수 만들기
    Math.random() - 0.0과 1.0사이의 임의의 double 값을 반환환

        0.0 <= Math.random() < 1.0

    ex) 1 ~ 3의 정수 구하기
    1. 각 변에 3을 곱한다

        0.0 * 3 <= Math.random() *3 < 1.0 * 3
        -> 0.0 <= Math.random() *3 < 3.0

    2. 각 변을 int 형으로 변환한다

        (int) 0.0 <= (int)( Math.random() * 3 ) < (int) 3.0
        -> 0 <= (int) ( Math.random() * 3 ) < 3

    3. 각 변에 1을 더한다

        0 + 1 <= (int) ( Math.random() * 3 ) + 1 < 3 + 1
        -> 1 <= (int) ( Math.random() * 3 ) + 1 < 4

- 중첩 for 문
    for 문 내에 또 다른 for 문을 포함시킬 수 있다.

    ex) 구구단

    for(int i = 2; i <= 9; i++) {
        for(int j = 1; j <= 9; j++) {
            System.out.println(i + " + " + j + " = " + ( i * j ));
        }
    }