- 배열
    "배열은 같은 타입의 여러 변수를 하나의 묶음으로 다루는 것"

    int score1, score2, score3, score4, score5;

    int[] score = new int[5];

- 배열의 선언과 생성
    배열의 선언 -- 배열을 다루기 위한 참조변수의 선언

            선언방법            선언 예
        타입[] 변수이름;      int[] score;
                            String[] name;
        타입 변수이름[];      int score[];
                            String name[];

    타입[] 변수이름;           // 배열을 선언(배열을 다루기 위한 참조변수 선언)
    변수이름 = new 타입[길이]; // 배열을 생성(실제 저장공간을 생성)

    int[] score;        // int 타입의 배열을 다루기 위한 참조변수 score 선언
    score = new int[5]; // int 타입의 값 5개를 저장할 수 있는 배열 생성

- 배열의 인덱스
    배열의 인덱스 -- 각 요소에 자동으로 붙는 번호
        "인덱스(index)의 범위는 0부터 '배열길이 - 1'까지"

        int[] score = new int[5]; // 길이가 5인 int 배열

                       ㅏ> 배열의 인덱스(index)
        score    score[0] score[0] score[0] score[0] score[0]
        0x100 ->   0        0        0        0        0
                  0x100     ㄴ 배열의 요소(element)

        score[3] = 100; // 배열 score 의 4번째 요소에 100을 저장.
        score    score[0] score[0] score[0] score[0] score[0]
        0x100 ->   0        0        0        100       0

        int value = score[3]; // 배열 score 의 4번째 요소의 값을 읽어서 value 에 저장

- 배열의 길이
    배열이름.length -- 배열의 길이(int 형 상수)

    int[] arr = new int[5]; // 길이가 5인 int 배열
    int tmp = arr.length;   // arr.length 의 값은 5이고 tmp 에 5가 저장된다.

            "배열은 한번 생성되면 실행 동안 그 길이를 바꿀 수 없다."

            int[] score = new int[6];

            // 배열의 모든 요소 출력
            for (int i = 0; i < 6; i++) {
                System.out.println(score[i]);
            }

            -> 만약 배열의 길이를 변경시, 배열의 길이와 for 문의 조건식 모두 변경해야 한다.
               혹여 둘 중 하나라도 다르면 인덱스의 범위가 달라져서 오류가 발생한다.

            int[] score = new int[6];

            // 배열의 모든 요소 출력
            for (int i = 0; i < score.length; i++) {
                System.out.println(score[i]);
            }

            -> 조건식을 변경하지 않아도 된다.

- 배열의 초기화
    배열의 각 요소에 처음으로 값을 저장하는 것.

        int[] score = new int[5];

        score[0] = (50;) --> 초기화
        score[1] = 60;
        score[2] = 70;
        score[3] = 80;
        score[4] = 90;

        // for 문 으로 초기화
        int[] score = new int[5];

        for (int i = 0; i < score.length; i++) {
            score[i] = i * 10 + 50;
        }

        배열 초기화 방법
        1. int[] score = new int[] {50, 60, 70, 80, 90};
        2. int[] score = {50, 60, 70, 80, 90}; // new int[]를 생략 가능. 제일 많이 사용한다.
        3. int[] score;
           score = {50, 60, 70, 80, 90}; // 에러. new int[]를 생략 불가.
           new int[] {50, 60, 70, 80, 90};

- 배열의 출력
    int[] iArr = {100, 95, 80, 70, 60};

    // 배열을 가르키는 참조변수 iArr 의 값을 출력
    System.out.println(iArr); // [I@14318bb 와 같은 형식의 문자열이 출력된다.
                              // [ => 배열, I => int, @ => 위치(주소)

    for (int i = 0; i < score.length; i++) { // 배열의 요소를 순서대로 하나씩 출력
        System.out.println(iArr[i]);
    }

    // 배열 iArr 의 모든 요소를 출력한다. [100, 95, 80, 70, 60]이 출력된다.
    System.out.println(Arrays.toString(iArr)); // Arrays 클래스의 toString 메소드를 이용하여 문자열로 출력

    예외적으로,
    char[] chArr = {'a', 'b', 'c', 'd'};
    System.out.println(chArr); // abcd 가 출력된다

- 배열의 활용(1)
    총합과 평군 -- 배열의 모든 요소를 더해서 총합과 평균을 구한다.

    int sum = 0; // 총합을 저장하기 위한 변수
    float average = 0f; // 평균을 저장하기 위한 변수

    int[] score = {100, 88, 100, 100, 90};

    for (int i = 0; i < score.length; i++) {
        sum += score[i]; // 반복문을 이용해서 배열에 저장되어 있는 값들을 모두 더한다
    }
    average = sum / (float) score.length; // 계산결과를 float 타입으로 얻으려 형변환

    System.out.println("총합 : " + sum);
    System.out.println("평균 : " + average);

- 배열의 활용(2)
    최대값과 최소값 -- 배열의 요소 중에서 제일 큰 값과 제일 작은 값을 찾는다.

    int[] score = {79, 88, 91, 33, 100, 55, 95};

    int max = score[0]; // 배열의 첫 번째 값으로 최대값을 초기화 한다.
    int min = score[0]; // 배열의 첫 번째 값으로 최소값을 초기화 한다.

    for (int i = 1; i < score.length; i++) { // 배열의 두 번째 요소부터 읽기 위해서 변수 i 의 값을 1로 초기화.
        if (score[i] > max) {
            max = score[i];
        } else if (score[i] < min) {
            min = score[i];
        }
    }

    System.out.println("최대값 : " + max);
    System.out.println("최소값 : " + min);

- 배열의 활용(3)
    섞기(shuffle) -- 배열의 요소의 순서를 반복해서 바꾼다.(숫자 섞기, 로또번호 생성)

    int[] numArr = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

    System.out.println(Arrays.toString(numArr));

    for (int i = 0; i < numArr.length; i++) {
        int n = (int) (Math.random() * 10); // 0 ~ 9 중의 한 값을 임의로 얻는다.
        int tmp = numArr[i];
        numArr[i] = numArr[n];  // numArr[0]과 numArr[n]의 값을 서로 바꾼다.
        numArr[n] = tmp;
    }

    System.out.println(Arrays.toString(numArr));

- String 배열의 선언과 생성
    String[] name = new String[3]; // 3개의 문자열을 담을 수 있는 배열을 생성한다.

            자료형                 기본값
            boolean               false
            char                  '\u0000'
            byte, short, int      0
            long                  0L
            float                 0.0f
            double                0.0d or 0.0
            참조형                 null

    String[] name = {"Kim", "Park", "Yi"};

- 커맨드 라인을 통해 입력받기
    커맨드 라인에 입력한 값이 문자열 배열에 담겨서 전달된다.

    System.out.println("매개변수의 개수 : " + args.length);

    for (int i = 0; i < args.length; i++) {
        System.out.println("args[" + i + "] = \""+ args[i] + "\"");
    }

- 2차원배열
    테이블 형태의 데티터를 저장하기 위한 배열

    int[][] score = new int[4][3]; // 4행(가로) 3열(세로)의 2차원 배열을 생성한다.

    score[0][0] = 100;               // 배열 score 의 1행 1열에 100을 저장
    System.out.println(score[0][0]); // 배열 score 의 1행 1열의 값을 출력

- 2차원 배열의 초기화

    1. int[][] arr = new int[][]{ {1, 2, 3}, {4, 5, 6} };
    2. int[][] arr = { {1, 2, 3}, {4, 5, 6} }; // new int[][] 생략

    --> int[][] arr = {
                            {1, 2, 3},
                            {4, 5, 6}
                       };

    ex)
        int[][] score = {
                            { 100, 100, 100},
                            { 20, 20, 20},
                            { 30, 30, 30},
                            { 40, 40, 40}
                        };

        int sum = 0;

        for (int i = 0; i < score.length; i++) { // 행(가로)
            for (int j = 0; j < score[i].length; j++) { // 열(세로)
                System.out.printf("score[%d][%d] = %d%n", i, j, score[i][j]);
                sum += score[i][j];
            }
        }
        System.out.printf("sum = " + sum);

- String 클래스
    1. String 클래스는 char[]와 메서드(기능)를 결합한 것
            String 클래스 = char[] + 메서드(기능)

    2. String 클래스는 내용을 변경할 수 없다.(Only Read)

- String 클래스의 주요 메서드

            메서드                                               설명
    char charAt(int index)                문자열에서 해당 위치(index)에 있는 문자를 반환한다.
    int length()                          문자열의 길이를 반환한다
    String substring(int from, int to)    문자열에서 해당 범위(from ~ to)의 문자열을 반환한다.(to 는 포함 안된다)
    boolean equals(Object obj)            문자열의 내용이 같은지 확인한다. 같으면 결과는 true, 다르면 false
    char[] toCharArray()                  문자열을 문자배열(char[])로 변환해서 반환한다.

    String str = "ABCDE";
    char ch = str.charAt(3); // 문자열 str 의 4번째 문자 'D'를 ch 에 저장.

    System.out.println(str.length()); // 문자열 길이 5를 출력한다.

    String str = "012345";
    String tmp = str.substring(1, 4); // str 에서 index 범위 1 ~ 4의 문자들을 반환
    System.out.println(tmp);          // "123"이 출력된다.

- Arrays 클래스로 배열 다루기
    문자열의 비교와 출력 -- equals(), toString()

    int[] arr = {0, 1, 2, 3, 4};
    int[][] arr2D = { {11, 12}, {21, 22} };

    System.out.println(Arrays.toString(arr));       // [0, 1, 2, 3, 4] 문자열로 반환
    System.out.println(Arrays.deepToString(arr2D)); // [ [11, 12], [21, 22] ]

    String[][] str2D = new String[][] { {"aaa", "bbb"}, {"AAA", "BBB"} };
    String[][] str2D2 = new String[][] { {"aaa", "bbb"}, {"AAA", "BBB"} };

    System.out.println(Arrays.equals(str2D, str2D2));       // false, 1차원 배열 비교 때 쓴다.
    System.out.println(Arrays.deepEquals(str2D, str2D2));   // true, 2차원 이상의 배열 비교 때 쓴다.

    배열의복사 -- copyOf(), copyOfRange()

    int[] arr = {0, 1, 2, 3, 4};

    int[] arr2 = Arrays.copyOf(arr, arr.length); // arr2 = [0, 1, 2, 3, 4]
    int[] arr3 = Arrays.copyOf(arr, 3);          // arr3 = [0, 1, 2]
    int[] arr4 = Arrays.copyOf(arr, 7);          // arr4 = [0, 1, 2, 3, 4, 0, 0]
    int[] arr5 = Arrays.copyOfRange(arr, 2, 4);  // arr5 = [2, 3] <-- 4는 불포함
    int[] arr6 = Arrays.copyOfRange(arr, 0, 7);  // arr6 = [0, 1, 2, 3, 4, 0, 0]

    배열의 정렬 -- sort()

    int[] arr = {3, 2, 0, 1, 4};
    Arrays.sort(arr);                           // 배열 arr 을 오름차순으로 정렬한다.
    System.out.println(Arrays.toString(arr));   // [0, 1, 2, 3, 4]