- 상속(inheritance)
    - 기존의 클래스를 새로운 클래스를 작성하느 것.(코드의 재사용)
    - 두 클래스를 부모와 자식으로 관계를 맺어주는 것.

        class 자식클래스 extends 부모클래스 {}

    - 자손은 조상의 모든 멤버를 상속받는다.(생성자, 초기화블럭 제외)
    - 자손의 멤버 갯수가 조상보다 적을 수 없다.(같거나 많다)
    - 자손의 변경은 조상에 영향을 미치지 않는다.

    class Point {
        int x;
        int y;
    }

    // Point 클래스와 상관 X  // Point 클래스와 상관 O (상속관계)
    class Point3D {         class Point3D extends Point {
        int x;                  int z;
        int y;              }
        int z;
    }
    -> 상속을 받든 안받든 결과는 같다.

    ex) ch07 -> ExtendsEx 파일 참조

- 클래스 간의 관계 결정하기
    상속관계 : '~은 ~이다'(is - a)
    포함관계 : '~은 ~을 가지고 있다'(has - a)

    class Point {
        int x;
        int y;
    }

    -포함관계                        - 상속관계계
   class Circle {                  class Circle extends Point {
        Point c = new Point();          int r;
        int r;                      }
    }

    원(circle)은 점(point)이다. - Circle is a Point.
    원(circle)은 점(point)를 가지고 있다. - Circle has a Point.

- 단일 상속(Single Inheritance)
    -- Java 는 단일 상속만을 허용한다. (C++은 다중상속 호용)

        class TvDVD extends Tv, DVD { // 에러. 조상은 하나만 허용된다.
            // ...
        }

    -- 비중이 높은 클래스 하나만 상속관계로, 나머지는 포함관계로 한다.

                                상속
    class Tv {      ---------------------------->   class TvDVD extends Tv {
        boolean power;                                  DVD dvd = new DVD();
        int channel;
                                                        void play() {
        void power() { power = !power }                     dvd.play();
        void channelUp() { ++channelUp }                }
        void channelDown() { --channelDown }
    }                                                   void stop() {
                                포함                         dvd.stop;
    class DVD {     ---------------------------->       }
        boolean power;
                                                        void rew() {
        void power() { power = !power }                     dvd.rew();
        void play() { /* 내용생략 */ }                   }
        void stop() { /* 내용생략 */ }
        void rew() { /* 내용생략 */ }                    void ff() {
        void ff() { /* 내용생략 */ }                        dvd.ff();
    }                                                   }
                                                    }

- Object 클래스 : 모든 클래스의 조상
    -- 부모가 없는 클래스는 자동적으로 Object 클래스를 상속받게 된다.
    -- 모든 클래스는 Object 클래스에 정의된 11개의 메소드를 상속받는다.
       toSting(), equals(Object obj), hashCode(), ...

- 오버라이딩(overriding)
    - 상속받은 조상의 메서드를 자신에 맞게 변경하는 것

    class Point {
        int x;
        int y;

        String getLocation() {
            return "x : " + x + ", y : " + y;
        }
    }

    class Point3D extends Point {
        int z;

        String getLocation() { // 오버라이딩
            return "x : " + x + ", y : " + y + ", z : " + z;
        }
    }

- 오버라이딩의 조건
    1. 선언부가 조상 클래스의 메서드와 일치해야 한다.
    -> 선언부(반환타입, 메서드이름, 매개변수 목록)
    2. 접근 제어가를 조상 클래스의 메서드보다 좁은 범위로 변경할 수 없다.
    -> 접근제어자 :  private,  public, default, protected
    3. 예외는 조상 클래스의 메서드보다 많이 선언할 수 없다.

- 오버로딩 VS 오버라이딩
    오버로딩 : 기존에 없는 (이름이 같은) 새로운 메소드를 정의하는 것 (new), 상속이랑 관계 없다.
    오버라이딩 : 상속받은 메소드의 내용을 변경하는 것 (change, modify)

    class Parent {
        void parentMethod() {}
    }

    class Child extends Parent {
        void parentMethod() {}          // 오버라이딩
        void parentMethod(int i) {}     // 오버로딩

        void childMethod() {}           // 메서드 정의
        void childMethod(int i) {}      // 오버로딩
        void childMethod() {}           // 중복정의 - 에러
    }

- 참조변수 super
    -- 객체 자신을 가리키는 참조변수
       인스턴스 메서드(생성자)내에만 존재 - static 메서드내에서 사용 불가
    -- 조상의 맴버를 자신의 맴버와 구별할 때 사용

    public static void main(String args[]) {
        Child c = new Child();
        c.method();
    }

    class Parent { int x = 10; /* super.x */ }

    class Child extends Parent {
        int x = 20; // this.x

        void method() {
            System.out.println("x = " + x); // x = 20
            System.out.println("this.x = " + this.x); // this.x = 20
            System.out.println("super.x = " + super.x); // super.x = 10
        }
    }

- super() -> 조상의 생성자
    - 조상의 생성자를 호출할 때 사용
    - 조상의 맴버는 조상의 생성자를 호출해서 초기화

    class Point {                           Point3D(int x, int y, int z) {
        int x, y;                               super(x, y); // 조상클래스의 생성자 Point(int x, int y) 호출
                                 ------>        this.z = z; // 자신의 맴버를 호출
        Point(int x, int y) {               }
            this.x = x;
            this.y = y;
        }
    }

    - 생성자의 첫 줄에는 반드시 생성자를 호출해야 한다. ***
      그렇지 않으면 컴파일러가 생성자의 첫 줄에 super();를 삽입

- 패키지(package)
    -- 서로 관련된 클래스 묶음
    -- 클래스는 클래스 파일(*.class), 패키지는 폴더. 하위 패키지는 하위 폴더
    -- 클래스의 실제 이름(full name)은 패키지를 퐘.(java.lang.String)
       rt.jar 는 클래스들을 압축한 파일(JDK 설치경로 \jre\lib 에 위치)
       java9 부터 rt.jar -> module 개념으로 나눔

- 패키지 선언
    -- 패키지는 소스파일의 첫 번째 문장으로 단 한번 선언
    -- 같은 소스파일의 클래스들은 모두 같은 패키지에 속하게 된다.
    -- 패키지 선언이 없으면 이름없는(unnamed)패키지에 속하게 된다.

- 클래스 페스(classpath)
    -- 클래스 파일(*.class)의 위치를 알려주는 경로(path)
    -- 환경변수 classpath 로 관리하며, 경로간의 구분자는 ' ; '를 사용
    -- classpath(환경변수)에 패키지의 루트를 등록해줘야 함.

- import 문
    -- 클래스를 사용할 때 패키지이름을 생략할 수 있다.
    -- 컴파일러에게 클래스가 속한 패키지를 알려준다.
                                                            import java.util.Date;
    class ImportTest {                                      class ImportTest {
        java.util.Date today = new java.util.Date();  -->       Date today = new Date();
        // ...                                                  // ...
    }                                                       }

    -- java.lang 패키지의 클래스는 import 하지 않고도 사용할 수 있다.
       String, Object, System, Thread, ...

- import 문 선언
    -- import 문을 선언하는 방법은 다음과 같다.

        import 패키지명.클래스명; or import 패키지명.*; <- 모든 클래스

    -- import 문은 패키지문과 클래스선언의 사이에 선언한다.
    -- import 문은 컴파일 시에 처리되므로 프래그램의 성능에 영향 없다.
    -- 이름이 같은 클래스가 속한 두 패키지를 import 할 때는 클래스 앞에 패키지명을 붙여줘야 한다.

        import java.sql.Date;
        import java.util.Date;

- static import 문
    -- static 멤버를 사용할 때 클래스 이름을 생략할 수 있게 해준다.

        import static java.lang.Integer.*; // Integer 클래스의 모든 static 메서드
        import static java.lang.Math.random; // Math.random 만
        import static java.lang.System.out; // System.out 을 out 만으로 참조가능

        System.out.println(Math.random()); --> out.println(random());

- 제어자(modifier)
    -- 클래스와 클래스의 멤버(멤버변수, 메서드)에 부가적인 의미 부여

        접근제어자 : public, protected, default(아무것도 안씀), private 중 하나만 사용
        그 외 : static, final, abstract, native, transient, synchronized, volatile, strictfp

    -- 하나의 대상에 여러 제어자를 같이 사용가능(접근제어자는 하나만)

        public class ModifierTest {
            public static final int WIDTH = 200;

            public static void main(String[] args) {
                System.out.println("WIDTH = " + WIDTH);
            }
        }

- static : 클래스의, 공통적인

    제어자    대상                           의미
                     - 모든 인스턴스에 공통적으로 사용되는 클래스 변수가 된다.
    static 멤버변수   - 클래스 변수는 인스턴스를 생성하지 않고도 사용 가능하다.
                     - 클래스가 메모리에 로드될 때 생성된다.

           메서드     - 인스턴스를 생성하지 않고도 호출이 가능한 static 메서드가 된다.
                     - static 메서드 내에서는 인스턴스 멤버들을 직접 사용할 수 없다.

    class StaticTest {
        static int width = 200; // 클래스 변수(static 변수)
        static int height = 200; // 클래스 변수(static 변수)

        static { // 클래스 초기화 블럭
            // static 변수의 복잡한 초기화 수행
        }

        static int max(int a, int b) { // 클래스 메서드(static 메서드)
            return a > b ? a : b;
        }
    }

- final : 마지막의, 변경될 수 없는

    제어자       대상                              의미
                클래스          변경될 수 없는 클래스, 확장될 수 없는 클래스가 된다.
                               그래서 final 로 지정된 클래스는 다른 클래스의 조상이 될 수 없다.
    final       메서드          변경될 수 없는 메서드, final 로 지정된 메서드는 오버라이딩을 통해 재정의 불가
            멤버변수/ 지역변수   변수 앞에 final 이 붙으면, 값을 변경할 수 없는 상수가 된다.

    final class FinalTest {          // 조상이 될 수 없는 클래스
        final int MAX_SIZE = 10;     // 값을 변경할 수 없는 멤버변수(상수)

        final void getMaxSize() {    // 오버라이딩할 수 없는 메서드(변경불가)
            final int LV = MAX_SIZE; // 값을 변경할 수 없는 지역변수(상수)
            return MAX_SIZE;
        }
    }

- abstract : 추상의, 미완성의 = 추상화

    제어자 대상 의미
    abstract 클래스 클래스 내에 추상 메서드가 선언되어 있음을 의미한다.
             메서드 선언부만 작성하고 구현부는 작성하지 않은 추상 메서드임을 알린다.

    abstract class AbstractTest { // 추상 클래스(추상 메서드를 포함한 클래스)
        abstract void move();     // 추상 메서드(구형부가 없는 메서드 {} X)
    }

    AbstractTest a = new AbstractTest(); // 에러. 추상 클래스의 인스턴스 생성불가.
    // 추상클래스를 상속받아서 완전한 클래스(구상클래스)를 만든 후에 객체 생성가능

- 접근제어자(access modifier)

    private : 같은 클래스 내에서만 접근이 가능.
    default : 같은 패키지 내에서만 접근이 가능.
    protected : 같은 패키지 내에서, 그래고 다른 패키지의 자손클래스에서 접근이 가능.
    public : 접근 제한이 전혀 없다.

    제어자     같은클래스   같은패키지   자손클래스   전체
    public        O           O          O        O
    protected     O           O          O
    default       O           O
    private       O

    public > protected > default > private

- 캡슐화와 접근 제어자
    접근 제어자를 사용하는 이유
        - 외부로부터 데이터를 보호하기 위해서
        - 외부에는 불필요한, 내부적으로만 사용되는, 부분을 감추기 위해

        // 접근 제어자를 private 로 하여 외부에서 직접 접근하지 못하도록 한다.
        public class Time {
            private int hour;
            private int minute;
            private int second;
        }

        // 메서드를 통해서 간접 접근하게 만든다.
        public int getHour() { return hour; }
        public void setHour(int hour) {
            if (hour < 0 || hour > 23) {
                return;
            }
            this.hour = hour;
        }

- 다형성(polymorphism)
    -- 조상 타입 참조 변수로 자손 타입 객체를 다루는 것

          Tv t    =  new SmartTv(); // 타입 불일치 ok
       조상타입변수 =   자손타입객체

    -- 자손 타입의 참조변수로 조상 타입의 객체를 가리킬 수 없다.

        Tv t = new SmartTv();   // 허용.
        SmartTv st = new Tv();  // 에러. 허용 안 됨.

- 참조변수의 형변환
    -- 사용할 수 있는 멤버의 갯수를 조절하는 것
    -- 조상, 자손 관게의 참조변수는 서로 형변환 가능

    class Car {}
    class FireEngine extends Car {}
    class Ambulance extends Car {}

    FireEngine f = new FireEngine();
    Car c = (Car) f;                // 조상인 Car 타입으로 형변환(생략가능)
    FireEngine f2 = (FireEngine) c; // 자손인 FireEngine 타입으로 형변환(생략불가)
    Ambulance a = (Ambulance) f;    // 에러. 상속관계가 아닌 클래스 간의 형변환 불가

- instanceof 연산자
    -- 참조변수의 형변환 가능여부 확인에 사용. 가능하면 ture 반환
    -- 형변환 전에 반드시 instanceof 로 확인해야 함.

    void doWork(Car c) {
        if (c instanceof FireEngine) {      // 1. 형변환이 가능한지 확인
            FireEngine fe = (FireEngine) c; // 2. 형변환
           fe.water();
            ...
        }
    }

    FireEngine fe = new FireEngine();
    System.out.println(fe instanceof Object);       // ture
    System.out.println(fe instanceof Car);          // ture
    System.out.println(fe instanceof FireEngine);   // ture

- 다형성의 장점
    1. 다형적 매개변수
    2. 하나의 배열로 여러종류 객체 다루기기

-매개변수의 다형성
    -- 참조형 매개변수는 메서드 호출시, 자신과 같은 타입 또는 자손타입의 인스턴스를 념겨줄 수 있다.

    ex) ch07 -> ParameterPolymorphism 참조

- 여러 종류의 객체를 배열로 다루기
    -- 조상타입의 배열에 자손들의 객체를 담을 수 있다.

    Product p1 = new Tv1();                 Product p[] = new Product[3];
    Product p1 = new Computer();  ----->    p[0] = new Tv1();
    Product p1 = new Audio();               p[1] = new Computer();
                                            p[3] = new Audio();

    class Buyer {
        int money = 1000;
        int bonusPoint = 0;

        Product[] cart = new Product[10]; // 구입한 물건을 담을 배열

        int i = 0;

        void buy(Product p) {
            if (money < p.price) {
                System.out.println("잔액부족");
                return;
            }

            money -= p.price;
            bonusPoint += p.bonusPoint;
            cart[i++] = p;
        }
    }

- 추상클래스
    -- 미완성 설계도. 미완성(추상) 메서드를 갖고 있는 클래스
        abstract class Player {
            abstract void play(int pos); // 추상메서드
            abstract void stop();
        }

    -- 다른 클래스 작성에 도움을 주기 위한 것. 인스턴스 생성 불가
        Player p = new Player(); // 에러. 추상클래스 인스턴스 생성 불가

    -- 상속을 통해 추상 메서드를 완성해야 인스턴스 생성 가능
        class AudioPlayer extends Player {
            void play(int pos) {    // 추상클래스 구현
                // ...
            }
            void stop() {
                // ...
            }
        }
        AudioPlayer ap = new AudioPlayer();
        Player p = new AudioPlayer();

- 추상메서드
    -- 미완성 메서드. 구현부(몸통 {}) 가 없는 메서드
        abstract 리턴타입 메서드이름();

    -- 꼭 필요하지만 자손마다 다르게 구현될 것으로 예상되는 경우
        abstract class Player {
            abstract void play(int pos);
            abstract void stop();
        }

        class AudioPlayer extends Player {
            void play(int pos) {    // 추상클래스 구현
                // ...
            }
            void stop() {
                // ...
            }
        }

        // 추상메서드 중 일부만 구현 했을 경우 클래스 앞에 abstract 를 붙여야 한다.
        abstract class AbstractPlayer extends Player {
            void play(int pos) {    // 추상클래스 구현
                // ...
            }
        }

    -- 추상 메서드 호출 가능(호출할 때는 선언부만 필요)
        abstract class Player {
            boolean pause;  // 일시정지 상태를 저장하기 위한 변수
            int currentPos; // 현제 play 되고 있는 위치를 저장하기 위한 변수

            Player() {  // 추상클래스도 생성자가 있어야 한다.
                pause = false;
                currentPos = 0;
            }
            // 지정된 위치(pos)에서 재성을 시작하는 기능이 수행하도록 작성해야 한다.
            abstract void play(int pos);
            // 재생을 직시 멈추는 기능을 수행하도록 작성해야 한다.
            abstract void stop();

            void play() {
                play(currentPos);   // 추상메서드를 사용할 수 있다.
            }
        }

- 추상클래스의 작성
    -- 여러 클래스에 공통적으로 사용될 수 있는 추상클래스를 바로 작성하거나
       기존클래스의 공통 부분을 뽑아서 추상클래스를 만든다.

       class Marine {   // 보병                               abstract class Unit {
          int x, y;     // 현재 위치                              int x, y;
          void move(int x, int y) { // 지정된 위치로 이동 }        abstract void move(int x, int y);
          void stop() { // 현재 위치에 정지 }                      void stop() { // 헌재 위치에 정지}
          void stimPack() { // 스팀팩 사용 }                   }
       }

       class Tank {   // 탱크                                 class Marine extends Unit {
          int x, y;     // 현재 위치                             void move(int x, int y) { // 지정된위치이동 }
          void move(int x, int y) { // 지정된 위치로 이동 }       void stimPack() { // 스팀팩 사용 }
          void stop() { // 현재 위치에 정지 }                   }
          void changeMode() { // 공격모드를 전환 }
       }                                                      class Tank extends Unit {
                                                                void move(int x, int y) { // 지정된위치이동 }
       class DropShip {   // 수송선                              void changeMode() { // 공경모드전환 }
          int x, y;     // 현재 위치                           }
          void move(int x, int y) { // 지정된 위치로 이동 }
          void stop() { // 현재 위치에 정지 }                   class DropShip extends Unit {
          void load() { // 선택된 대상을 태운다 }                  void move(int x, int y) { // 지정된위치이동 }
          void unload() { // 선택된 대상을 내린다 }                void load() { // 선택된 대상 태움 }
       }                                                        void unload() { // 선택된 대상 내림 }
                                                              }

       Unit[] group = new Unit[3];
       group[0] = new Marine();
       group[1] = new Tank();
       group[2] = new DropShip();

       for (int i = 0; i < group.length; i++) {
            group[i].move(100, 200);
       }

    -- 추상화 <--> 구체화
    -- 추상화된 코드는 구체화된 코드보다 유연하다. 변경에 유리

        GregorianCalender cal = new GregorianCalender(); // 구체적
        Calender cal = Calender.getInstance(); // 추상적

        public static Calender getInstance(Locale aLocale) {
            return creteCalender(TimeZone.getDefault(), aLocale);
        }

        private static Calender creteCalender(TimeZone zone, Locale aLocale) {
            // ...
                if  (calType != null) {
                    switch (calType) {
                        case "buddhist":
                            cal = new BuddhistCalender(zone, aLocale);
                            break;
                        case "japanese":
                            cal = new JapaneseImperialCalender(zone, aLocale);
                            break;
                        case "gregory":
                            cal = new GregorianCalender(zone, aLocale);
                            break;
                    }
                }
        }

- 인터페이스(interface)
    -- 추상메서드의 집합
    -- 구현된 것이 전혀 없는 설계도. 껍데기(모든 멤버가 public)

    interface 인터페이스이름 {
        public static final 타입 상수이름 = 값;
        public abstract 메서드이름(매개변수 목록);
    }

    ex)
    interface PlayingCard {
        public static final int SPADE = 4;
        final int DIAMOND = 3;  // public static(생략가능) final int DIAMOND = 3;
        static Int HEART = 2;   // public(생략가능) static final int HEART = 2;
        int CLOVER = 1;         // public static final(생략가능) int CLOVER = 1;

        public abstract String getCardNumber();
        String getCardKind();   // public abstract(생략가능) String getCardKind();
    }

    -- 인터페이스의 조상은 인터페이스만 가능(Object 가 최고 조상 아님)
    -- 다중 상속(조상이 여러개)이 가능(추상메서드는 충동해도 문제 없음)

        interface FightAble extends Movable, AttackAble {}

        interface Movable {
            // 지정된 위치(x, y)로 이동하는 기능의 메서드
            void move(int x, int y);
        }

        interface AttackAble {
            // 지정된 대상(u)을 공격하는 기능의 메서드
            void attack(Unit u);
        }

- 인터페이스의 구현
    -- 인터페이스에 정의된 추상 메서드를 완성하는 것

        class 클래스이름 implements 인터페이스이름 {
            // 인터페이스에 정의된 추상메서드를 모두 구현해야 한다.
        }

        class Fighter implements FightAble {
            public void move(int x, int y) { // ... }
            public void attack(Unit u) { // ... }
        }

    -- 일부만 구현하는 경우, 클래스 앞에 abstract 를 붙여야 한다.

        abstract class Fighter implements FightAble {
            public void move(int x, int y) { // ... }
        }

- 인터페이스를 이용한 다형성
    -- 인터페이스 타입 매개변수는 인터페이스 구현한 클래스의 객체만 가능

    class Fighter extends Unit implements FightAble {
        public void move(int x, int y) { // ... }
        public void attack(FightAble f) { // ... }
    }

    Unit u = new Fighter();
    FightAble f = new Fighter();

    f.move(100, 200);
    f.attack(new Fighter());

    -- 인터페이스를 메서드의 리턴타입으로 지정할 수 있다.

    // FightAble 인터페이스를 구현한 클래스의 인스턴스를 반환
    FightAble method() {
        Fighter f = new Fighter();
        return f;
        -> return new Fighter();
    }

    class Fighter extends Unit implements FightAble {
        public void move(int x, int y) { // ... }
        public void attack(FightAble f) { // ... }
    }

- 인터페이스의 장점
    -- 두 대상(객체)간의 '연결, 대화, 소통'을 돕는 '중간 역할'을 한다.
    -- 선언(설계)와 구현을 분리시킬 수 있게 한다.

        class B {                                   interface I {
            public void method() {                      public void method();
                System.out.println("methodB");  ->  }
            }
        }                                           class B implements I {
                                                        public void method() {
                                                            System.out.println("methodB");
                                                        }
                                                    }
    -- 인터페이스 덕분에 B 가 변경되어도 A 는 안바꿀 수 있게 된다.(느슨한 결합)

         // A 가 B 를 사용.(A 가 B 에 의존)
            A ------> B                         =======>  A -------> ( ---->  ( B ) )
         (User)   (Provider)                            (User)  (Interface) (Provider)
         // B 를 C 로 변경하려면 A 도 변경해야 한다         // 인터페이스로 하면 B 만 변경하면 된다.

         -> 직접적인 관계의 두 클래스 (A - B)          -> 간접적인 관계의 두 클래스 (A - I -B)

         class A {
            public void methodA(B b) {
                b.method();                         interface I {
            }                                          void methodB();
         }                                          }
                                            ====>
         class B {                                  class B implements I {
            public void methodB() {                     public
                System.out.println("methodB");
            }
         }

          class InterfaceTest {
             public static void main(String args[]) {
                 A a = new A();
                 a.methodA(new B());
             }
          }